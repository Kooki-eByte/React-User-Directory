{"version":3,"sources":["components/DisplayEmployees.jsx","pages/Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["DisplayEmployees","props","employees","config","useState","sortConfig","setSortConfig","useMemo","sortableEmployees","sort","a","b","key","direction","requestSort","useSortableData","allEmployees","getClassNamesFor","name","undefined","React","searchTerm","setSearchTerm","handleChange","event","target","value","type","placeholder","onChange","className","scope","onClick","filter","employee","firstName","toLowerCase","includes","toLocaleLowerCase","map","newEmployee","id","lastName","age","department","work","Home","Employees","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3367799.chunk.js","sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport \"../styles/componentStyles.css\";\n\nconst useSortableData = (employees, config = null) => {\n    const [sortConfig, setSortConfig] = useState(config);\n  \n    const sortedEmployees = useMemo(() => {\n      let sortableEmployees = [...employees];\n      if (sortConfig !== null) {\n        sortableEmployees.sort((a, b) => {\n          if (a[sortConfig.key] < b[sortConfig.key]) {\n            return sortConfig.direction === 'ascending' ? -1 : 1;\n          }\n          if (a[sortConfig.key] > b[sortConfig.key]) {\n            return sortConfig.direction === 'ascending' ? 1 : -1;\n          }\n          return 0;\n        });\n      }\n      return sortableEmployees;\n    }, [employees, sortConfig]);\n  \n    const requestSort = (key) => {\n      let direction = 'ascending';\n      if (\n        sortConfig &&\n        sortConfig.key === key &&\n        sortConfig.direction === 'ascending'\n      ) {\n        direction = 'descending';\n      }\n      setSortConfig({ key, direction });\n    };\n  \n    return { employees: sortedEmployees, requestSort, sortConfig };\n};\n\nexport default function DisplayEmployees(props) {\n    const {allEmployees} = props\n    const { employees, requestSort, sortConfig } = useSortableData(allEmployees);\n    const getClassNamesFor = (name) => {\n        if (!sortConfig) {\n        return;\n        }\n        return sortConfig.key === name ? sortConfig.direction : undefined;\n    };\n\n    const [searchTerm, setSearchTerm] = React.useState(\"\");\n    const handleChange = event => {\n        setSearchTerm(event.target.value);\n    };  \n\n    if (!searchTerm) {\n        return (\n            <div>\n                <div>\n                    <input\n                    type=\"text\"\n                    placeholder=\"Search By First Name\"\n                    value={searchTerm}\n                    onChange={handleChange}\n                    />\n                </div>\n    \n                <table className=\"table table-hover table-dark\">\n                <thead className=\"thead-dark\">\n                    <tr>\n                    <th scope=\"col\">\n                        <button\n                        type=\"button\"\n                        onClick={() => requestSort(\"id\")}\n                        className={getClassNamesFor('id')}\n                        >\n                        ID\n                        </button>\n                    </th>\n                    <th scope=\"col\">\n                        <button\n                        type=\"button\"\n                        onClick={() => requestSort(\"name\")}\n                        className={getClassNamesFor('name')}\n                        >\n                        Name\n                        </button>\n                    </th>\n                    <th scope=\"col\">\n                        <button\n                        type=\"button\"\n                        onClick={() => requestSort(\"age\")}\n                        className={getClassNamesFor('age')}\n                        >\n                        Age\n                        </button>\n                    </th>\n                    <th scope=\"col\">\n                        <button\n                        type=\"button\"\n                        onClick={() => requestSort(\"department\")}\n                        className={getClassNamesFor('department')}\n                        >\n                        Department\n                        </button>\n                    </th>\n                    <th scope=\"col\">\n                        <button\n                        type=\"button\"\n                        onClick={() => requestSort(\"work\")}\n                        className={getClassNamesFor('work')}\n                        >\n                        Occupation\n                        </button>\n                    </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {employees.map((employee) => (\n                        <tr key={employee.id}>\n                            <td>{employee.id}</td>\n                            <td>{`${employee.firstName} ${employee.lastName}`}</td>\n                            <td>{employee.age}</td>\n                            <td>{employee.department}</td>\n                            <td>{employee.work}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n            </div>        \n        )\n    } else {\n        return (\n            <div>\n                <div>\n                    <input\n                    type=\"text\"\n                    placeholder=\"Search By First Name\"\n                    value={searchTerm}\n                    onChange={handleChange}\n                    />\n                </div>\n    \n                <table className=\"table table-hover table-dark\">\n                <thead className=\"thead-dark\">\n                    <tr>\n                    <th scope=\"col\">\n                        <button\n                        type=\"button\"\n                        onClick={() => requestSort(\"id\")}\n                        className={getClassNamesFor('id')}\n                        >\n                        ID\n                        </button>\n                    </th>\n                    <th scope=\"col\">\n                        <button\n                        type=\"button\"\n                        onClick={() => requestSort(\"name\")}\n                        className={getClassNamesFor('name')}\n                        >\n                        Name\n                        </button>\n                    </th>\n                    <th scope=\"col\">\n                        <button\n                        type=\"button\"\n                        onClick={() => requestSort(\"age\")}\n                        className={getClassNamesFor('age')}\n                        >\n                        Age\n                        </button>\n                    </th>\n                    <th scope=\"col\">\n                        <button\n                        type=\"button\"\n                        onClick={() => requestSort(\"department\")}\n                        className={getClassNamesFor('department')}\n                        >\n                        Department\n                        </button>\n                    </th>\n                    <th scope=\"col\">\n                        <button\n                        type=\"button\"\n                        onClick={() => requestSort(\"work\")}\n                        className={getClassNamesFor('work')}\n                        >\n                        Occupation\n                        </button>\n                    </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {employees.filter((employee => employee.firstName.toLowerCase().includes(searchTerm.toLocaleLowerCase()))).map(newEmployee =>(\n                        <tr key={newEmployee.id}>\n                            <td>{newEmployee.id}</td>\n                            <td>{`${newEmployee.firstName} ${newEmployee.lastName}`}</td>\n                            <td>{newEmployee.age}</td>\n                            <td>{newEmployee.department}</td>\n                            <td>{newEmployee.work}</td>\n                        </tr>\n                    ))}\n                </tbody>\n                </table>\n            </div>\n        )\n    }\n    \n}","import React from \"react\";\nimport DisplayEmployees from \"../components/DisplayEmployees\";\nimport Employees from \"../seed/randomEmps.json\";\n\n\nexport default function Home() {\n    return (\n        <div>\n            <DisplayEmployees allEmployees={Employees} />\n        </div>\n    )\n}","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Home from \"./pages/Home\";\n\n/* \nTODO - Sort the table by at least one category (Have a form that listens and calls a component to Sort the array of objects based on category given)\n\nTODO - In the form listen for the filter (maybe a select option of a given property, such as work, department)\n*/\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>User Employee Directory</h1>\n        <br />\n        <Router>\n          <Route exact path=\"/\" component={Home} />\n        </Router>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}